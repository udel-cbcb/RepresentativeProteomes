#!/usr/bin/perl  

my %upIdAndTaxIdASMean = ();
if(@ARGV != 1) {
        print "perl getPMIDAndASScoresInc.pl  prevRP75.txt\n";
        exit 1;
}

print "reading prevRP\n";
open(RP, $ARGV[0]) or die "Can't open $ARGV[0]\n";
while($line=<RP>) {
        chomp($line);
        if($line =~ /^\>/) {
                my ($upId, $taxId) = (split(/\t/, $line))[0,1];
                $upId =~ s/^\>//;
                $prevRP{$upId."\t".$taxId} = 1;
        }
}
close(RP);
print "finish reading prevRP\n";


my $pmidScore = 0;
my $pdbScore = 0;
my $spScore = 0; 
my $ignorePMID;
my %pmids = ();
my %pdbs = ();
my %upIdAndtaxIdPmidHash = ();
my %upIdAndtaxIdPdbHash = ();
my %upIdAndtaxIdSpHash = ();
my %upIdAndtaxIdEntryHash = ();
my %upIdAndtaxIdEntryScoreSumHash = ();
my %upIdAndtaxIdHash = ();
my %refp = ();
my %cpa = ();

`rm -rf ../data/score_inc`;

open(REFP, "../data/refp.tb") or die "Can't open ../data/refp.tb\n";
while($line=<REFP>) {
	chomp($line);
	$refp{$line} = 1;
}
close(REFP);

open(CPA, "../data/1to1.dat") or die "Can't open ../data/1to1.dat";
while($line=<CPA>) {
	chomp($line);
	my ($ac, $taxId, $upId) = (split(/\s+/, $line))[0, 2, 3];
	if($upId =~ /^UP/) {
		$cpa{$ac} = 1;	
		$upACMap{$upId}{$ac} = 1;
		$upCount{$upId."\t".$taxId} += 1;
		if(!$acToUPs{$ac}) {
			$acToUPs{$ac} .= $upId;
		}
		else {
			$acToUPs{$ac} .= ";".$upId;	
		} 
	}
}
close(CPA);

print "Finish reading 1to1 file\n";

my %entryAS = ();
my $ebiScoreDir = "../data/ebi_score/score";
open(AS, $ebiScoreDir) or die "Can't open $ebiScoreDir\n";
while(my $line=<AS>) {
        chomp($line);
        if($line !~ /^accession/) {
                my ($ac, $scoreTotal) = (split(/\, /, $line))[0, 10];
                if($cpa{$ac}) {
                        $entryAS{$ac} = $scoreTotal;
			#print $ac."|".$scoreTotal."|\n";
                }
        }
}
close(AS);

#Taxon   Mnemonic        Scientific Name Common Name     Synonym Other Names     Reviewed        Rank    Lineage Parent
my $firstAC = "";
my %proteomesHash;

print "Starting reading Swiss-Prot data\n";
getScore("../data/uniprot_sprot.dat");
print "Finish reading Swiss-Prot data\n";

print "Starting reading TrEMBL data\n";
getScore("../data/uniprot_trembl.dat");
print "Finish reading TrEMBL data\n";

sub getScore {
my ($dataFile) =@_;
#open(DATA, "<", "../data/uniprot.dat");
open(DATA, "<", $dataFile);
while($line=<DATA>)
{
	#print $line;
	chomp($line);
        if ($line=~ /^ID/) {
		if($line =~ /Unreviewed\;/) {
			$spScore = 0;
		}
		else {
			$spScore = 1;	
		}
		$idAll = (split /\s+/, $line)[1];
		$mnemonic = (split /\_/, $idAll)[1];	
        }      
        elsif ($line=~ /^AC   /) {
        	$ac=(split /\s+/,$line)[1]; $ac=~s/\;//; 
               	if($firstAC eq "") {
                       	$firstAC = $ac;
			if($cpa{$firstAC}) {
				#print $firstAC."\n"; 
				$isCompleteProteome = 1;
			}
                }
        }
	#NCBI_TaxID=115547;
	elsif ($line =~ /^OX   /) {
		$line =~ s/^OX\s+NCBI_TaxID\=//;
		$taxId = (split(/\;/, $line))[0];
	}
	elsif ($line =~ /^OS   /) {
		$scientificName .= " ".substr($line, 5); 
	}
	elsif ($line =~ /^OC   /) {
		$lineage .= " ".substr($line, 5);
	}
	elsif ($line =~ /^RP   /) {
		if($line =~ /\[LARGE SCALE/ || $line =~ /COMPLETE GENOME/) {
			$ignorePMID = 1;
		}
	}
	elsif ($line =~ /^RX   /) {
		if($ignorePMID eq 0) {
			if($line =~ /PubMed\=/) {
				$line =~ s/^RX\s+\wPubMed\=//;
				$pmid = (split(/\;/, $line))[0];
				if($pmid) {
					$pmids{$pmid} = 1;
				}
			}
		}
		else {
			$ignorePMID = 0;
		}
	}
	elsif($line =~ /^DR   PDB\;/) {
		$pdbScore = 1;
		$line =~ s/^DR\s+PDB\;//;
		$pdbId = (split(/\;/, $line))[0];
		$pdbs{$pdbId} = 1;
	}
        elsif ($line =~ /^\/\/$/) {
		if($isCompleteProteome) {
			$scientificName =~ s/\.//;		
			$scientificName =~ s/^\s+//;		
			$lineage =~ s/\.//;		
			$lineage =~ s/^\s+//;		
			if($lineage !~ /^Viruses\;/) {
				#Taxon   Mnemonic        Scientific Name Common Name     Synonym Other Names     Reviewed        Rank    Lineage Parent
				#$taxInfo = $taxId."\t".$mnemonic."\t".$scientificName."\t"."\t"."\t"."\t"."\t"."\t".$lineage."\t\n";	
				$taxInfo = $mnemonic."\t".$scientificName."\t"."\t"."\t"."\t"."\t"."\t".$lineage."\t\n";	
				@upIds = split(/\;/, $acToUPs{$firstAC});
				foreach(@upIds) {	
					my $upId = $_;
					if($upCount{$upId."\t".$taxId} > 100) {
						$upIdAndTaxIdHash{$upId."\t".$taxId} = $taxInfo;
						$pmidScore = keys %pmids;
						$pdbScore =  keys %pdbs;
						$score = $pmidScore + $pdbScore + $spScore;
						$entryInfo =  $firstAC."\t".$pmidScore."\t".$pdbScore."\t".$spScore."\t".$score."\t".$entryAS{$firstAC};
						$upIdAndTaxIdEntryHash{$upId."\t".$taxId}{$firstAC} = $entryInfo;
						$upIdAndTaxIdEntryScoreSumHash{$upId."\t".$taxId}{$firstAC} = $score;
						$upIdAndTaxIdEntryASTotal{$upId."\t".$taxId} += $entryAS{$firstAC};	
						if($spScore eq 1) {
							$upIdAndTaxIdSpHash{$upId."\t".$taxId}{$firstAC} = 1;
						}
						if($pdbScore > 0) {
							for my $pdbId (keys %pdbs) {
								$upIdAndTaxIdPdbHash{$upId."\t".$taxId}{$pdbId} = 1;
							}
						}
						if($pmidScore > 0) {
							foreach my $pmid (keys %pmids) {
								$upIdAndTaxIdPmidHash{$upId."\t".$taxId}{$pmid} = 1;
							}	
						}
						$pmidASEntry{$upId."\t".$taxId}{$firstAC} = $ac."\t".$pmidScore."\t".$entryAS{$firstAC};
					}
				}
			}
		}
                $firstAC="";
		$pmidScore = 0;
		$pdbScore = 0;
		$spScore = 0;
		%pmids = (); 
		%pdbs = (); 
		$ignorePMID = 0;
		$isCompleteProteome = 0;
		$mnemonic = "";
		$scientificName = "";
		$lineage = "";
        }
	
}
close(DATA);
}


print "Start finding min and max\n";
$minSeqPmidScore = 1000000000;
$maxSeqPmidScore = -1;
$minSeqPdbScore = 1000000000;
$maxSeqPdbScore = -1;
$minSeqSPScore = 1000000000;
$maxSeqSPScore = -1;
$minSeqASTotal = 1000000000;
$maxSeqASTotal = -1;
foreach my $upIdAndTaxId (sort keys %upIdAndTaxIdHash) {
	my $entryHashRef = $upIdAndTaxIdEntryHash{$upIdAndTaxId};
	my %entryHash = %$entryHashRef;
	my $ASSum = 0;
	my $ASCount = 0;	
	foreach my $ac (sort keys %entryHash) {
		@rec = split(/\t/, $entryHash{$ac});
		if($rec[1] < $minSeqPmidScore) {
			$minSeqPmidScore = $rec[1];
		}
		if($rec[1] > $maxSeqPmidScore) {
			$maxSeqPmidScore = $rec[1];
		}
		if($rec[2] < $minSeqPdbScore) {
			$minSeqPdbScore = $rec[2];
		}
		if($rec[2] > $maxSeqPdbScore) {
			$maxSeqPdbScore = $rec[2];
		}
		if($rec[3] < $minSeqSPScore) {
			$minSeqSPScore = $rec[3];
		}
		if($rec[3] > $maxSeqSPScore) {
			$maxSeqSPScore = $rec[3];
		}
		if($rec[5] < $minSeqASTotal) {
			$minSeqASTotal = $rec[5];
		}
		if($rec[5] > $maxSeqASTotal) {
			$maxSeqASTotal = $rec[5];
		}
		$ASSum += $rec[5];
		$ASCount += 1;
	}
	$upIdAndTaxIdASMean{$upIdAndTaxId} = ($ASSum+0.0)/ $ASCount;
}
print "Finish finding min and max\n";

$rangeSeqPmidScore = $maxSeqPmidScore - $minSeqPmidScore;
print "MaxSeqPmidScore: ".$maxSeqPmidScore." - ".$minSeqPmidScore." = ".$rangeSeqPmidScore."\n";;

$rangeSeqPdbScore = $maxSeqPdbScore - $minSeqPdbScore;
print "MaxSeqPdbScore: ".$maxSeqPdbScore." - ".$minSeqPdbScore." = ".$rangeSeqPdbScore."\n";;

$rangeSeqSPScore = $maxSeqSPScore - $minSeqSPScore;
print "MaxSeqSPScore: ".$maxSeqSPScore." - ".$minSeqSPScore." = ".$rangeSeqSPScore."\n";;

$rangeSeqASTotal = $maxSeqASTotal - $minSeqASTotal;
print "MaxSeqASTotal: ".$maxSeqASTotal." - ".$minSeqASTotal." = ".$rangeSeqASTotal."\n";;

if( ! -d "../data/score_inc") {
	system("mkdir -p ../data/score_inc");
}
open(COMPLETE, ">", "../data/up-taxonomy-complete_yes.tab");
print COMPLETE "UPID"."\t"."Taxon"."\t"."Mnemonic"."\t"."Scientific Name"."\t"."Common Name"."\t"."Synonym"."\t"."Other Names"."\t"."Reviewed"."\t"."Rank"."\t"."Lineage"."\t"."Parent\n";
foreach my $upIdAndTaxId (sort keys %upIdAndTaxIdHash) {
	print COMPLETE $upIdAndTaxId."\t".$upIdAndTaxIdHash{$upIdAndTaxId};	
	my $entryHashRef = $upIdAndTaxIdEntryHash{$upIdAndTaxId};
	my %entryHash = %$entryHashRef;
	$scoreFile = $upIdAndTaxId;
	$scoreFile =~ s/\t/-/;
	open(SCORE, ">", "../data/score_inc/".$scoreFile."_score.txt");
	print SCORE "Accession"."\t"."#PMID"."\t"."#PDB"."\t"."SwissProt"."\t"."Sum\n";
	foreach my $ac (sort keys %entryHash) {
		@rec = split(/\t/, $entryHash{$ac});
		my $weightedSeqPmidScore = 100*(1+(($rec[1] - $minSeqPmidScore)/$rangeSeqPmidScore));
		my $weightedSeqPdbScore = 10*(1+(($rec[2] - $minSeqPdbScore)/$rangeSeqPdbScore));
		my $weightedSeqSPScore = 1*(1+(($rec[3] - $minSeqSPScore)/$rangeSeqSPScore));
		$scoreSum = $weightedSeqPmidScore + $weightedSeqPdbScore + $weightedSeqSPScore;
		
		print SCORE $ac."\t".$rec[1]."\t".$rec[2]."\t".$rec[3]."\t".$scoreSum."\n";	
	}
	close(SCORE);										
       	
 	my $rangeEntryPMIDTotal = $rangeSeqPmidScore;
        my $rangeEntryASTotal = $rangeSeqAS; 
	my $entryASFile = "../data/score_inc/".$scoreFile."_AS\.txt";
        open(ENTRYAS, ">", $entryASFile)  or die "Can't open $entryASFile\n";
        print ENTRYAS "Accession\t#UniqPMID\t#ASTotal\tNormPMID\tNormASTotal\tSum\n";
	#%{ $upIdAndTaxIdPmidHash{$upIdAndTaxId}};
        for my $ac (keys %{ $pmidASEntry{$upIdAndTaxId}} ) {
                my ($pmid, $asTotal) = (split(/\t/, $pmidASEntry{$upIdAndTaxId}{$ac}))[1, 2];
                my $normEntryPMID = "";
                if($rangeEntryPMIDTotal == 0) {
                        $normEntryPMID = 100;
                }
                else {
                        $normEntryPMID = 100*(1+(($pmid - $entryPMIDTotalMin)/$rangeEntryPMIDTotal));
                }
                my $normEntryAS = "";
                if($rangeEntryASTotal == 0) {
                        $normEntryAS = 10;
                }
                else {
                        $normEntryAS = 10*(1+(($asTotal - $entryASTotalMin)/$rangeEntryASTotal));
                }
                my $sum = $normEntryPMID + $normEntryAS;
                $pmidASEntry{$upIdAndTaxId}{$ac} .= "\t".$normEntryPMID."\t".$normEntryAS."\t".$sum;
                print ENTRYAS $pmidASEntry{$upIdAndTaxId}{$ac}."\n";
        }
}
close(COMPLETE);




if( ! -d "../data/score_inc") {
	system("mkdir -p ../data/score_inc");
}
$minPPmidScore = 100000000000;
$maxPPmidScore = -1;
$minPPdbScore = 100000000000;
$maxPPdbScore = -1;
$minPSpScore = 10000000000;
$maxPSpScore = -1;
$minPEntryTotal = 1000000000000;
$maxPEntryTotal = -1;

$minPASMean = 1000000000000;
$maxPASMean = -1;

for my $upIdAndTaxId (sort keys(%upIdAndTaxIdHash)) {
	my $pPmidScore = keys %{ $upIdAndTaxIdPmidHash{$upIdAndTaxId}};
	my $pPdbScore = keys %{ $upIdAndTaxIdPdbHash{$upIdAndTaxId}};
	my $pSpScore = keys %{ $upIdAndTaxIdSpHash{$upIdAndTaxId}};
	my $pentryTotal = keys %{ $upIdAndTaxIdEntryHash{$upIdAndTaxId}};
	#my $entryASTotal = keys %{ $upIdAndTaxIdEntryASTotal{$upIdAndTaxId}};
	my $pASMean = $upIdAndTaxIdASMean{$upIdAndTaxId};

	if($pPmidScore < $minPPmidScore) {
		$minPPmidScore = $pPmidScore;
	} 
	if($pPmidScore > $maxPPmidScore) {
		$maxPPmidScore = $pPmidScore;
	} 
	if($pPdbScore < $minPPdbScore) {
		$minPPdbScore = $pPdbScore;
	} 
	if($pPdbScore > $maxPPdbScore) {
		$maxPPdbScore = $pPdbScore;
	} 
	if($pSpScore < $minPSpScore) {
		$minPSpScore = $pSpScore;
	} 
	if($pSpScore > $maxPSpScore) {
		$maxPSpScore = $pSpScore;
	} 
	if($pentryTotal < $minPEntryTotal) {
		$minPEntryTotal = $pentryTotal;
	} 
	if($pentryTotal > $maxPEntryTotal) {
		$maxPEntryTotal = $pentryTotal;
	} 
	if($pASMean < $minPASMean) {
		$minPASMean = $pASMean;
	} 
	if($pASMean > $minPASMean) {
		$minPASMean = $pASMean;
	} 
	 $proteomeASInfo{$upIdAndTaxId} = $upId."\t".$taxId."\t".$refp{$upIdAndTaxId}."\t".$prevRP{$upIdAndTaxId}."\t".$ppmidScore."\t".$pASMean."\t".$pentryTotal;
}
$rangePPmidScore = $maxPPmidScore - $minPPmidScore;
print "PMID: $rangePPmidScore = $maxPPmidScore - $minPPmidScore\n";

$rangePPdbScore = $maxPPdbScore - $minPPdbScore;
print "PDB: $rangePPdbScore = $maxPPdbScore - $minPPdbScore\n";

$rangePSpScore = $maxPSpScore - $minPSpScore; 
print "SP: $rangePSpScore = $maxPSpScore - $minPSpScore\n"; 

$rangePEntryTotal = $maxPEntryTotal - $minPEntryTotal;
print "Entry: $rangePEntryTotal = $maxPEntryTotal - $minPEntryTotal\n";

$rangePEntryASTotal = $maxPASMean - $minPASMean;
print "Entry AS: $rangePEntryASTotal = $maxPASMean - $minPASMean\n";

 
my $rangeProteomePMIDCount = $rangePPmidScore;
my $rangeProteomeASMean = $rangePEntryASTotal;

my $rangeProteomeEntryCount = $rangePEntryTotal;

my $proteomeASScoreFile = "../data/score_inc/proteomeScores.txt";

open(PAS, ">", $proteomeASScoreFile) or die "Can't open $proteomeASScoreFile\n";
print PAS "UPID\tTaxId\tRefP\tPrevRP\t#UniqPMID\tASMean\t#Entry\tNormPMID\tNormASMean\tNormEntryCount\tSum\n";
for my $upIdAndTaxId (keys %proteomeASInfo) {
        my ($upId, $taxId, $refp, $prevRP, $pmidCount, $ASMean, $entryCount) = (split(/\t/, $proteomeASInfo{$upIdAndTaxId}))[0, 1, 2, 3, 4, 5, 6];
        print PAS $proteomeASInfo{$upIdAndTaxId}."\t";
        my $normPMID = 1000*(1+(($pmidCount - $proteomePMIDCountMin)/$rangeProteomePMIDCount));
        my $normASMean = 100*(1+(($ASMean - $proteomeASMeanMin)/$rangeProteomeASMean));
        my $normEntryCount = 1*(1+(($entryCount - $proteomeEntryCountMin)/$rangeProteomeEntryCount));

        my $sum = $normPMID + $normASMean + $normEntryCount;
        if($refp) {
                $sum = 10000+ $sum;
        }

        if($prevRP) {
                $sum = 8000 + $sum;
        }
        print PAS $normPMID."\t".$normASMean."\t".$normEntryCount."\t".$sum."\n";
}
close(PSCORE);
